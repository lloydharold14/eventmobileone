---
alwaysApply: true
---
Navigation: Use Decompose for KMP navigation. Contracts (routes, args) live in :core:ui.

State: Unidirectional MVI.

UiState (immutable data class), UiEvent (user intents), Effect (one‑off side effects).

ViewModel exposes StateFlow<UiState> + Flow<Effect>; accept events via fun onEvent(UiEvent).

Business work is executed in domain use cases; data is repository layer.

Side‑effects: use viewModelScope + injected dispatchers. No GlobalScope.

Flows: use mapLatest, stateIn, shareIn with explicit SharingStarted.

Stability: Annotate state with @Immutable where applicable; prefer value classes for ids.

Composition rules:

No logic in Composables beyond mapping state to UI.

Composables must be pure and @Composable functions must be small.

Hoist state; prefer rememberSaveable only for UI state, not domain state.

Provide Preview only for Android/Desktop; gate with if (PlatformPreview.enabled) if shared.